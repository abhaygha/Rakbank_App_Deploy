name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

  secrets-scan:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Secrets scan using Gitleaks
      - name: Gitleaks scan
        uses: zricethezav/gitleaks-action@v1.1.0
        with:
          args: --path=./

  quality-check:
    runs-on: ubuntu-latest
    needs: secrets-scan
    env:
      SONAR_HOST_URL: https://sonarcloud.io
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
          java-package: 'jdk'
          architecture: 'x64'
          check-latest: false

      - name: Run tests and generate coverage report
        run: mvn clean verify

      - name: Analyze with SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn sonar:sonar -Dsonar.projectKey=abhaygha_Rakbank_App_Deploy -Dsonar.organization=abhaygha -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Check Quality Gate Status
        id: check_quality_gate
        run: |
          quality_gate_status=$(curl -s -H "Authorization: token ${{ secrets.SONAR_TOKEN }}" \
            -X GET "https://sonarcloud.io/api/qualitygates/project_status?projectKey=abhaygha_Rakbank_App_Deploy" | \
            jq -r '.projectStatus.status')
          echo "Quality Gate Status: $quality_gate_status"
          
          coverage=$(curl -s -H "Authorization: token ${{ secrets.SONAR_TOKEN }}" \
            -X GET "https://sonarcloud.io/api/measures/component?component=abhaygha_Rakbank_App_Deploy&metricKeys=coverage" | \
            jq -r '.component.measures[0].value' | sed 's/%//')
          echo "Coverage: $coverage"
          
          echo "Debug Info: Quality Gate Status=$quality_gate_status, Coverage=$coverage"
          
          if [ "$quality_gate_status" != "OK" ]; then
            echo "Quality Gate failed!"
            exit 1
          fi

          if (( $(echo "$coverage < 30" | bc -l) )); then
            echo "Coverage below 30%!"
            exit 1
          fi
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
          java-package: 'jdk'
          architecture: 'x64'
          check-latest: false

      - name: Build with Maven
        run: mvn clean package

  push-to-ecr:
    runs-on: ubuntu-latest
    needs: build
    env:
      AWS_REGION: us-east-1
    permissions:
      id-token: write
      contents: read
      security-events: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::891377120087:role/github-action-role
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: false
          registry-type: private
          skip-logout: false

      - name: Determine Docker image tag
        id: get_version
        run: |
          if [ "${GITHUB_REF_TYPE}" == "tag" ]; then
            VERSION=${GITHUB_REF_NAME}
          else
            VERSION=$(git describe --tags --always)
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION"

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: 891377120087.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: rakbank
          VERSION: ${{ env.VERSION }}
        run: |
          docker build --no-cache -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION

  deploy:
    runs-on: ubuntu-latest
    needs: push-to-ecr
    env:
      AWS_REGION: us-east-1
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Grant execute permission to deploy.sh
        run: chmod +x ./deploy.sh

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::891377120087:role/github-action-role
          aws-region: us-east-1
  
      - name: Set up kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
  
      - name: Print Kubeconfig (Debug)
        run: cat $HOME/.kube/config
  
      - name: Check Kubeconfig permissions (Debug)
        run: ls -l $HOME/.kube/config
  
      - name: Test Kubernetes connectivity (Debug)
        run: |
          export KUBECONFIG=$HOME/.kube/config
          kubectl cluster-info

      - name: Create kubeconfig directory
        run: mkdir -p $HOME/.kube

      - name: Set up kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Print Kubeconfig
        run: cat $HOME/.kube/config

      - name: Check Kubeconfig permissions
        run: ls -l $HOME/.kube/config

      - name: Run deploy.sh
        run: |
          export KUBECONFIG=$HOME/.kube/config
          ./deploy.sh ${{ env.VERSION }}
        env:
          AWS_REGION: us-east-1
          JAVA_HOME: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.11-9/x64
          VERSION: ${{ env.VERSION }}
          AWS_DEFAULT_REGION: us-east-1
