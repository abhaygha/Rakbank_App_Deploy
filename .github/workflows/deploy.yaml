name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      SONAR_HOST_URL: https://sonarcloud.io
      QUALITY_GATE_THRESHOLD: 85  # Set the quality gate threshold percentage

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
          java-package: 'jdk'
          architecture: 'x64'
          check-latest: false

      # Run SonarCloud analysis
      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn sonar:sonar -Dsonar.projectKey=abhaygha_Rakbank_App_Deploy -Dsonar.organization=abhaygha -Dsonar.host.url=${{ env.SONAR_HOST_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      # Check SonarCloud Quality Gate status
      - name: Check SonarCloud Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          QUALITY_GATE_STATUS=$(curl -s "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=abhaygha_Rakbank_App_Deploy" -u "${SONAR_TOKEN}": | jq -r '.projectStatus.status')
          if [ "$QUALITY_GATE_STATUS" != "OK" ]; then
            echo "Quality Gate check failed. Please address the issues."
            exit 1
          fi

      # List target directory contents (optional)
      - name: List target directory contents
        run: ls -l target

      # Configure AWS credentials by assuming a role
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::767397671904:role/github-actions-role  # Replace with your IAM role ARN
          role-session-name: github-actions-session
          aws-region: ${{ env.AWS_REGION }}

      # Docker build and push to ECR
      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: 891377120087.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: rakbank
          VERSION: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION

      # Grant execute permission to deploy.sh
      - name: Grant execute permission to deploy.sh
        run: chmod +x ./deploy.sh

      # Create kubeconfig directory
      - name: Create kubeconfig directory
        run: mkdir -p $HOME/.kube

      # Set up kubeconfig
      - name: Set up kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
      
      # Print Kubeconfig (for debugging)
      - name: Print Kubeconfig
        run: cat $HOME/.kube/config
      
      # Check Kubeconfig permissions (for debugging)
      - name: Check Kubeconfig permissions
        run: ls -l $HOME/.kube/config

      # Run deploy.sh script
      - name: Run deploy.sh
        run: |
          export KUBECONFIG=$HOME/.kube/config
          ./deploy.sh ${{ env.VERSION }}
        env:
          AWS_REGION: us-east-1
          JAVA_HOME: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.11-9/x64
          VERSION: ${{ env.VERSION }}
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
