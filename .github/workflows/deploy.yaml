name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '17'
        java-package: 'jdk'
        architecture: 'x64'
        check-latest: false

    - name: Analyze with SonarCloud
      uses: sonarsource/sonarcloud-github-action@v2
      with:
        projectKey: abhaygha_Rakbank_App_Deploy
        organization: abhaygha
        token: ${{ secrets.SONAR_TOKEN }}

    - name: Check SonarCloud Quality Gate
      uses: sonarsource/sonarcloud-github-action@v2
      with:
        projectBaseDir: .
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Check Quality Gate Status
      id: check_quality_gate
      run: |
          quality_gate_status=$(curl -s -H "Authorization: token ${{ secrets.SONAR_TOKEN }}" \
            -X GET "https://sonarcloud.io/api/qualitygates/project_status?projectKey=abhaygha_Rakbank_App_Deploy" | \
            jq -r '.projectStatus.status')
          coverage=$(curl -s -H "Authorization: token ${{ secrets.SONAR_TOKEN }}" \
            -X GET "https://sonarcloud.io/api/measures/component?component=abhaygha_Rakbank_App_Deploy&metricKeys=coverage" | \
            jq -r '.component.measures[0].value')
          echo "Quality Gate Status: $quality_gate_status"
          echo "Coverage: $coverage"
          if [ "$quality_gate_status" != "OK" ]; then
            echo "Quality Gate failed!"
            exit 1
          fi
          if (( $(echo "$coverage < 85" | bc -l) )); then
            echo "Coverage below 85%!"
            exit 1
          fi  

    - name: Build with Maven
      run: mvn clean package

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::891377120087:role/github-action-role
        aws-region: us-east-1

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: false
        registry-type: private
        skip-logout: false

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: 891377120087.dkr.ecr.us-east-1.amazonaws.com
        ECR_REPOSITORY: rakbank
        VERSION: ${{ env.VERSION }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION

    - name: Grant execute permission to deploy.sh
      run: chmod +x ./deploy.sh

    - name: Create kubeconfig directory
      run: mkdir -p $HOME/.kube

    - name: Set up kubeconfig
      run: |
        echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
    
    - name: Print Kubeconfig
      run: cat $HOME/.kube/config
    
    - name: Check Kubeconfig permissions
      run: ls -l $HOME/.kube/config

    - name: Run deploy.sh
      run: |
        export KUBECONFIG=$HOME/.kube/config
        ./deploy.sh ${{ env.VERSION }}
      env:
        AWS_REGION: us-east-1
        JAVA_HOME: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.11-9/x64
        VERSION: ${{ env.VERSION }}
        AWS_DEFAULT_REGION: us-east-1
